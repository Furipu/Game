{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/login/login.component.html","webpack:///./src/app/login/login.component.scss","webpack:///./src/app/login/login.component.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts","webpack:///./src/providers/ajax.service.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error('Cannot find module \"' + req + '\".');\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"\"","module.exports = \"<div style=\\\"text-align:center\\\">\\r\\n  <h1>\\r\\n    Welcome to {{ title }}!\\r\\n  </h1>\\r\\n  <img width=\\\"300\\\" alt=\\\"Angular Logo\\\" src=\\\"assets/logo.jpg\\\">\\r\\n</div>\\r\\n<login></login>\\r\\n\"","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent {\r\n\r\n  constructor() { }\r\n\r\n  title = 'my boilerplate';\r\n\r\n}\r\n","import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { AppComponent } from './app.component';\r\nimport { LoginComponent } from './login/login.component';\r\nimport { HttpClientModule } from '@angular/common/http';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    LoginComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    HttpClientModule,\r\n    FormsModule\r\n  ],\r\n  providers: [],\r\n  bootstrap: [AppComponent]\r\n})\r\n\r\nexport class AppModule { }\r\n","module.exports = \"<!-- <?php echo $welcome ?> -->\\r\\n<!-- {{zegDag('Hans')}} -->\\r\\n<!-- {{welcome}}{{naam}}\\r\\n<form>\\r\\n  <input type=\\\"text\\\" (change)=\\\"ch($event)\\\" ><br>\\r\\n  <input type=\\\"password\\\"><br>-->\\r\\n  <button (click)=\\\"ajaxer()\\\">Let me in, dammit!</button>\\r\\n  <!-- </form> -->\\r\\n{{tekst}}<br>\\r\\n<label for=\\\"admincheck\\\">I'm an admin!</label>\\r\\n<input type=\\\"checkbox\\\" name=\\\"admincheck\\\" [(ngModel)]=\\\"isAdmin\\\">\\r\\n\\r\\n<input type=\\\"text\\\" [(ngModel)]=\\\"hoogte\\\" name=\\\"text\\\">\\r\\n<input type=\\\"text\\\" name=\\\"num\\\" [(ngModel)]=\\\"cache\\\" (click)=\\\"onConfirm()\\\">\\r\\n\"","module.exports = \"\"","import { Component, OnInit } from '@angular/core';\r\nimport { AjaxService } from '../../providers/ajax.service';\r\n\r\n@Component({\r\n  selector: 'login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.scss']\r\n})\r\nexport class LoginComponent implements OnInit {\r\n\r\n  constructor(private ajax:AjaxService) { }\r\n\r\n  public welcome:string = \"welkom!\";\r\n  public naam:string;\r\n  public ajaxer(){\r\n    this.ajax.get(\"blabla\");\r\n  }\r\n  // public showValue(){alert(this.naam);}\r\n  // public ch(e){this.naam=e.target.value;}\r\n  public tekst = \"dit is de originele tekst\";\r\n  public isAdmin:boolean;\r\n  public hoogte:string;\r\n  public cache:string;\r\n  public onConfirm():void{this.hoogte=this.cache;}\r\n  public zegDag(naam:string):void{\r\n    // x = \"Hans\";\r\n  console.log(\"dag!\"+naam);\r\n}\r\npublic\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false\r\n};\r\n\r\n/*\r\n * In development mode, to ignore zone related error stack frames such as\r\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\r\n * import the following file, but please comment it out in production mode\r\n * because it will have performance impact when throw error\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.log(err));\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AjaxService {\r\n\r\n  constructor(private http:HttpClient) {\r\n\r\n  }\r\n  get(x){\r\n    alert(x);\r\n    this.http.get(\"http://localhost:80\").subscribe((res)=>{alert(res)},(err)=>{console.log(err)});\r\n  alert(\"post\");\r\n  }\r\n}\r\n"],"sourceRoot":""}